# -*- coding: utf-8 -*-
"""Dec8.inpyb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cPjnWoJVCPT7HckdE0lLoXi3N319cbj6
"""

import numpy as np
# import pandas as pd

with open('Dec8.txt','r') as f:
  lines = f.readlines()

instructions = lines[0].strip()

map = list()
for line in lines[2:]:
  #Parse line
  out = line.replace('=','').replace('(','').replace(')','').replace(',','').split()
  map.append(out)

# map

with open('Dec8.txt','r') as f:
  lines = f.readlines()

instructions = lines[0].strip()

map = list()
for line in lines[2:]:
  #Parse line
  out = line.replace('=','').replace('(','').replace(')','').replace(',','').split()
  map.append(out)

location = 'AAA'
lcnt = 0
found = False
icnt = 0
nsteps = 0
while (1):
  # find current location
  lcnt = 0
  while (map[lcnt][0]!=location): lcnt+=1
    # Use current direction
  if instructions[icnt] == 'L':
    location = map[lcnt][1]
  elif instructions[icnt] == 'R':
    location = map[lcnt][2]
  else:
    print('Error')
    break

  nsteps +=1
  #print(nsteps)
  icnt+=1
  if icnt >= len(instructions): icnt=0

  if location == 'ZZZ':
    print(location)
    break

print(f'Part1: Number of steps {nsteps}')

map[:50]

# Part 2
# Use the map to find all the locations that end in 'A'
curloc = []
for entry in map:
  if entry[0][2] == 'A':
    curloc.append(entry[0])

lcnt = 0
icnt = 0
nsteps = 0
numz = [ 0 for c in range(len(curloc))]
while (1):
  #print(curloc)
  for cnt in range(len(curloc)):
    # find current location  curloc[cnt]
    lcnt = 0
    while (map[lcnt][0]!=curloc[cnt]): lcnt+=1
      # Use current direction
    if instructions[icnt] == 'L':
      curloc[cnt] = map[lcnt][1]
    elif instructions[icnt] == 'R':
      curloc[cnt] = map[lcnt][2]
    else:
      print('Error')
      break

  nsteps +=1
  icnt+=1
  if icnt >= len(instructions): icnt=0

  if nsteps>1000000: break
  found = True
  for cnt2 in range(len(curloc)):
    if curloc[cnt2][2] != 'Z':
      found = False
    else:
      #if(numz[cnt2]==0):
      numz[cnt2] = nsteps
      print(f'NumZ {numz}')

  if sum([numz[c]>0 for c in range(len(curloc))]) == len(curloc):
    print(f'NumZ {numz}')
    #print(curloc)
    break

print(f'Part 2: {np.lcm.reduce(numz)}')

