# -*- coding: utf-8 -*-
"""Dec2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SUS24UBDJFLvZgj84HjtXnnLxO0fybdN
"""

import numpy as np

with open('Dec2.txt','r') as f:
  lines = f.readlines()

# Create a function to process a line and create a dictionary of each trial
def process_line(line_in):
  texttargets = [ 'red', 'green', 'blue']

  # Split the game number from the games
  split1 = line_in.split(':')
  gameid = int(split1[0].split(' ')[1])

  # Now split each subgame using the ; seperator
  gamessplit = split1[1].split(';')
  num_times = len(gamessplit)

  # Set up arrays for the number of green red and blue
  red = np.zeros([num_times],dtype=int)
  green = np.zeros([num_times],dtype=int)
  blue = np.zeros([num_times],dtype=int)

  # Process the reveals one at a time
  for gamenum in range(len(gamessplit)):
    onedraw = gamessplit[gamenum].split(',')
    for cnum in range(len(onedraw)):
      finalsplit = onedraw[cnum].split();
      if 'red' in finalsplit[1]:
        red[gamenum] = int(finalsplit[0])
      elif 'green' in finalsplit[1]:
        green[gamenum] = int(finalsplit[0])
      elif 'blue' in finalsplit[1]:
        blue[gamenum] = int(finalsplit[0])
      else:
        print('Invalid colour: ' + finalsplit[1])

  # Create the dictionary for this game
  game = { 'id': gameid, 'num_times': num_times, 'green': green,
          'red': red, 'blue': blue}
  return game

# Create a function to validate if a game was possible given the max
# number of each colour available
def validate_game(gameLimits, game):
  #print(gameLimits)
  rlimit = gameLimits['redLimit']
  glimit = gameLimits['greenLimit']
  blimit = gameLimits['blueLimit']
  validGame = np.all(game['red'] <= rlimit) and np.all(game['green'] <= glimit) \
    and np.all(game['blue'] <= blimit)
  return validGame

# Calculate the power of a game - product of max number of rgb shown
def cube_power(game):
  return np.max(game['red']) * np.max(game['green']) * np.max(game['blue'])

# Create the main loop to process all the lines, identify the invalid games and
# sum the ids of the invalid game
gameLimits = {'redLimit': 12, 'greenLimit': 13, 'blueLimit': 14}

valid_sum = 0
valid_indices = []
total_power = 0
powers = []
for cnt in range(len(lines)):
  game = process_line(lines[cnt])
  valid = validate_game(gameLimits,game)
  if valid:
    valid_sum += game['id']
    valid_indices.append(game['id'])
  power = cube_power(game)
  total_power= total_power + power
  powers.append(power)

print(f'Part1: {np.sum(valid_indices)}')
print(f'Part 2 {total_power}')
